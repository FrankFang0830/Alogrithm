/***
题目描述：小M给你一个长度为n的数组，我们定义median数为该数组从小到大排序后，下标为(n-1)/2的数字。
下标从0开始，(n-1)/2表示整数除法，即向下取整。现在我们已经得到了一个初始的数组，我们希望这个数组的median数是一个给定数字x。
所以我们需要加入一些数到数组中从而完成我们的目标。数组中的元素可以重复，请问，最少需要加入多少个数字才能达成这个目标。
第一行输入两个整数n x (1 <= n <= 500, 1 <= x <= 10^5)。
//此方法仅适用于2，3，4，5，这种差值为一的连续递增数组。
接下来一行有n个正整数表示初始的数组，用空格分开，范围是[1, 10^5]。
输入1:
3 2
2 3 4
输出1:1
说明1：样例一中，加入1，得到1 2 3 4，那么median数的下标为(4 - 1)/2 = 1, median数为2。加一个数字就可以了。
输入2：
3 4
1 2 3
输出2:4
说明2:样例二中，加入4 5 6 7，得到1 2 3 4 5 6 7，median数为4。最少加4个数字。
***/
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
public class Main {
   public static void main(String args[]) {
	   Scanner sc=new Scanner(System.in);
	   int   n= sc.nextInt();
	   int   x= sc.nextInt();
	   ArrayList<Integer> arr=new ArrayList<Integer>();
	   int 	 amount=0,i=0;
	   for(i=0;i<n;i++) {
		   arr.add(i, sc.nextInt());
	   }
	   while(x!=arr.get((n-1)/2)) {
	     if(x>arr.get((n-1)/2)) {
	    	 		arr.add(n, arr.get(n-1)+1);
	    	 		i++;
	    	 		n++;
	    	 		amount++;
	     }
	     
	     else if(x<arr.get((n-1)/2)){
	    	 		System.out.println(i);
	    	 		arr.add(0, arr.get(0)-1);
	    	 		i++;
	    	 		n++;
	    	 		amount++;
	     }
	     else if(x==arr.get((n-1)/2)) break;
	   }
	   System.out.println(amount);
	   
   }
 }

