/***
牛客网：https://www.nowcoder.com/practice/9173e83d1774462f81255a26feafd7c6?tpId=98&tqId=32830&tPage=1&rp=1&ru=/ta/2019test&qru=/ta/2019test/question-ranking
题目描述：牛牛总是睡过头，所以他定了很多闹钟，只有在闹钟响的时候他才会醒过来并且决定起不起床。从他起床算起他需要X分钟到达教室，上课时间为当天的A时B分，请问他最晚可以什么时间起床
输入：每个输入包含一个测试用例。
每个测试用例的第一行包含一个正整数，表示闹钟的数量N(N<=100)。
接下来的N行每行包含两个整数，表示这个闹钟响起的时间为Hi(0<=A<24)时Mi(0<=B<60)分。
接下来的一行包含一个整数，表示从起床算起他需要X(0<=X<=100)分钟到达教室。
接下来的一行包含两个整数，表示上课时间为A(0<=A<24)时B(0<=B<60)分。
数据保证至少有一个闹钟可以让牛牛及时到达教室。
输出：输出两个整数表示牛牛最晚起床时间。
***/
///
此版本为暴力破解版本。
大致思路“
///
import java.util.Scanner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
public class Main {
  public static void main(String args[]){
	  Scanner sc= new Scanner(System.in);
      int num=0;
      num = sc.nextInt();
      int[][] arr = new int[num][2];
      for(int i=0;i<num;i++) {
    	    arr[i][0] = sc.nextInt() ;
    	    arr[i][1] = sc.nextInt();      
    	   }
      int cost = sc.nextInt();//路上花费
      int   ch = sc.nextInt();//上课小时
      int 	cm = sc.nextInt();//上课分钟
      int 	ph=0 , pm=0;//出门时间
      //首先先计算，出门的时间是几时几分。
      //如果时间超过了60分钟，先减一小时后计算。
      if(cost>60&&cost<=100) {
			    	      cost=cost-60;
			    	      ch=ch-1;
      }
      if((cm-cost)>=0) {
	  		ph=ch;
	  		pm=cm-cost;
      }
      else {
	  		ph=ch-1;
	  		pm=cm-cost+60;
      }
      int maxh=0,maxm=0;
      //当小时恰好满足出门小时的时候，分钟在范围内且大的胜出，要在分钟在范围内的情况下晚出门。
     //flag是为了防止，如果arr[i][0]<ph更新，分钟也取到了最大值maxm，但是arr[i][0]==ph，分钟可能因为没有满足maxm没有得到更新导致结果出错。
	      for(int i=0;i<num;i++) {
	    	  	if(arr[i][0]==ph&&arr[i][1]<=pm) {//小时相同的情况，且时间符合的前提下，
	    	  		    maxh=arr[i][0];
	    	  		    int flag=0;
	    	  			if(arr[i][1]>=flag&&arr[i][1]<=pm) {
	    	  				maxh=arr[i][0];
	    	  				maxm=arr[i][1];
	    	  				flag=arr[i][1];
	    	  				}
	    	  			
	    	  		}
	    	  	else if(arr[i][0]<ph) {//小时在范围内的，记录小时最大值，和新遍历的比较。大就更新max，意味着更晚
	    	  		if(arr[i][0]>maxh) {
	  					maxh=arr[i][0];
	  					maxm=arr[i][1];
	  					}
		  		else if(arr[i][0]==maxh) {
		  			if(arr[i][1]>maxm) {
		  				maxm=arr[i][1];
		  				}
		  			}
		    	  		
	    	  	}
	    	  	}
	  		
    
    System.out.println(maxh+" "+maxm);
  }
}
