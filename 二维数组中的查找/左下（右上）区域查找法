牛客网地址：https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
题目描述：在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
分析：根据题目特点已知数组行列从上到下，从左到右都是有序排列。
例如用例数组：
1,2,3
4,5,6
7,10,12
8,11,13
我们要查找的数字是11。利用右上角的思维，已知每一行的最右一定是最大值。
我们先从第一行的最右边比起，如果目标值比最右值大就直接查看下一行最右值行数+1。如果比目标值小，则列数-1.
这个算法中运用到的最巧妙的思想在于，当开启下一行时，列指针不用恢复到初始值。永远将范围锁定在当前指针ij的（i+1，0:j)
因为每一列递增，也就是在一列中下一个值永远大于上一个值，而每一行中也是递增，所以永远只要比左下部分就可以了。
代码如下：
public class test{
	//从右上角开始查找，如果小于第一行右上角则在第一行里查找，如果大于则看第二行的元素
	public static boolean Find(int target, int [][] array) {
		int columns=array[0].length;//数组长度一致
		int rows=array.length;
		int i=0,j=columns-1;
		if (rows==0) {
	        return false;
	    }
		if (columns==0) {
	        return false;
	    }
		while(i<rows && j>-1) {
			if(array[i][j]==target) return true;
			if(target>array[i][j]) {
				i++;
			}
			else {
				j--;
			}
		}
		return false;
		
    	}
    public static void main(String args[]) {
       int test[][]= new int[][]{{1,2,3},{4,5,6},{7,10,12},{8,11,13}};
       System.out.println(Find(8,test));
    }
}
