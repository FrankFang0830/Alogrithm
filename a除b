牛客网地址：https://www.nowcoder.com/practice/1df03f0989a1494fa2acfcbd43496ffd?tpId=98&tqId=32859&tPage=2&rp=8&ru=%2Fta%2F2019test&qru=%2Fta%2F2019test%2Fquestion-ranking
题目描述：
求a/b的小数表现形式。如果a可以整除b则不需要小数点。如果是有限小数，则可以直接输出。如果是无限循环小数，则需要把小数循环的部分用"()"括起来。
输入描述:
两个整数a和b，其中
0 <= a <= 1000 000
1 <= b <= 10 000
输出描述:
一个字符串，该分数的小数表现形式。
-----------------------------------具体题解见同包<<analysis>> -----------------------------------------------------------------
示例1
输入10 1
输出10
10/1 = 10

示例2
输入1 2
输出0.5
说明1/2 = 0.5

示例3
输入1 3
输出0.(3)
说明1/3 = 0.333333...

示例4
输入1 6
输出0.1(6)
说明1/6 = 0.16666666....

示例5
输入1 7
输出0.(142857)
说明1 / 7 = 0.1428571428...

代码：！！！！！！
//切记，如果一个变量能搞定全部算法，就不要用多个变量表达同一种操作产生的结果，容易混淆导致陷入崩溃。。。。。

import java.util.ArrayList;
import java.util.Scanner;
//r如果是可以整除，直接输出结果
//如果不可以，则需要将余数*10以后再被 除数 除 按竖式规则进行运算。
//可以有限循环，则说明余数不会重复。如果余数重复就说明一定是无限循环小数。
public class Main{

    public static void main(String[] args){
       Scanner sc= new Scanner(System.in);
        int dividend=sc.nextInt();
        int divisor=sc.nextInt();
        ArrayList after = new ArrayList(); //存放最后的结果，小数点前也要记录为【0】
        ArrayList<Integer> remainder = new ArrayList();//存放余数，方便查看是否重复
        int n= dividend/divisor;
        after.add(n);    //将小数点前的数字计入结果数组
        int k=dividend%divisor; //将第一个余数计入余数数组
        remainder.add(k);
        int i=0,m=0;
        //正好整除
        if(k==0) System.out.println(n);
        //不能整好整除
        else if(k!=0) {//如果余数不是0，则说明不会被整除
        		while(k!=0) {  //这个循环针对的是有限小数知道能被整除为止。 
        		m=k*10;
    	          	n=m/divisor;
    	          	k=m%divisor;
    	          	after.add(n);
    	          	///if判断是如果出现同一个余数则说明是有限循环小数，如果是0.12341234.。这样的无限循环小数，我们直接将位置锁定在第一个1到第二个1之间即可。
    	          
    	          	//也就是余数集中第一个重复的数字，我们把中间这段数字取出加上（）。
	          	if(remainder.contains(k)) {  
	        			int pos=remainder.indexOf(k); //获取k在余数数组中的所在位置，因为余数数组和结果数组是一一对应的关系，一个余数对应一个结果，所以找到k就是找到在结果集中的位置。
	        			after.add(pos+1, "("); //在k值前加入（
	        			after.add(")");      //在最后加入），退出循环。
	        			break;              
	        		}
	        	//如果是0.2453333这样的数字在0.2453都是else条件，满足循环，但在第二个3时，会退出循环，因为重复代表无限
	        		else {
	        			remainder.add(k); //如果是正常情况，就在余数集中加入新余数，并保持循环
	        		 }
	          	
        		}
       //按格式输出
        String result =""+after.get(0).toString();
        if(after.size()>=2)result=result+".";
        for(int q=1;q<after.size();q++) {
        	   result=result+after.get(q).toString();
        }
        System.out.println(result);
        }
    }
    
}
