/****
牛客网联系地址：https://www.nowcoder.com/practice/51dcb4eef6004f6f8f44d927463ad5e8?tpId=98&tqId=32825&tPage=1&rp=1&ru=/ta/2019test&qru=/ta/2019test/question-ranking
题目描述：小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。
并且小Q对于能否被3整除这个性质很感兴趣。
小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。
输入包括两个整数l和r(1 <= l <= r <= 1e9), 表示要求解的区间两端。
输入：2 5
输出：3
说明：12, 123, 1234, 12345...
其中12, 123, 12345能被3整除。
****/
/*****
题解：在行测里，我们经常用到的解题技巧为，如果想判断一个数是否能被三整除，那么只需将这个数的各个位数求和，看是否能被三整除即可。
再回到当前题目，这个数列本身就是有特点的数列，我们不需要将12345这个数字分开五位数存储依次求和，而是看这些数的特征。
1  ---  n=1;
12 ---  n=2;
>>>>
12345678 ---- n=8;
将每一组数依次求和，就是公差为一，项数为n的等差数列。根据等差数列求和公式(n+1)*n/2即为第n个数的各个位数之和，我们只需要判断是否能被三整除即可。
注：此求和公式，只能根据这个特殊数列的特征使用。以下循环的i即为n，要想判断l到r之间的整除数，只需要将i控制在l，r之间
使用long长整型变量，是根据测试用例，防止可能存在越界情况。
*****/
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
public class Main {
  public static void main(String args[]){
	  Scanner sc= new Scanner(System.in);
	  int l=sc.nextInt();
	  int r=sc.nextInt();
	  int sum=0;
	  for(long i=l;i<=r;i++) {
		  if((i*(1+i)/2)%3==0) {
			  sum=sum+1;
		  }
	    }
	  System.out.println(sum);
  	  }
  }
 
